/*=============================
+++++++클래스와 인스턴스+++++++
-클래스 설계
-배열 활용
===============================
◎ Test092.java
=============================*/

// ○ 실습 설계
// 아래의 클래스(WeekDay)를 완성한다.
// 사용자로부터 년, 월, 일을 입력받아
// 해당 날짜의 요일을 출력하는 프로그램을 구현한다.
// 단, 달력 클래스(Calender)는 사용하지 않는다.
// 또한, 클래스의 개념을 활용하여 작성할 수 있도록 한다.
// 그리고, 배열의 개념도 적용시켜 작성할 수 있도록 한다.

// 실행 예시
// 년 월 일 입력(공백 구분): 1998 7 9

// >> 1998년 7월 9일 → 목요일

// ※ 문제 인식 및 분석
//    -윤년 및 평년의 개념 적용
//    -1년 1월 1일 → 월요일
//    -입력받은 날로부터 며칠이 지난 건지 계산해서 7로 나누면 됨


import java.util.Scanner;


class WeekDay
{
	// 주요 변수 선언(속성 구성)
	private int y, m, d;

	// 메소드 정의(입력받기)
	void input()
	{
		Scanner sc = new Scanner(System.in);
		System.out.print("년 월 일 입력(공백 구분): ");
		y = sc.nextInt();
		m = sc.nextInt();
		d = sc.nextInt();
	}

	// 메소드 정의(요일 산출하기)
	String week()
	{
		int days;			//--날짜를 계산할 변수
		int calDay;			//--days에서 7을 나눈 나머지값을 대입해 요일을 구할 변수
		String result;		//--요일을 담을 변수
		
		int[] month = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};	//--월별 일수를 담은 배열
		String[] dayName = {"일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"};	//--요일을 담은 배열
		
		days = (y-1)*365 + (y-1)/4 - (y-1)/100 + (y-1)/400;	//--입력한 날짜의 직전 해까지 더함(기본값인 365일만큼 곱한 뒤 윤년이 있었던 해의 개수만큼 더함)

		if (y % 4 == 0 && y % 100 != 0 || y % 400 == 0)		//--윤년이면 2월의 일수를 29일로 변경
			month[1] = 29;

		for (int j=0; j<m-1; j++)	//--입력한 달에서 직전 달까지의 일수 더하기
			days += month[j];
		
		days += d;					//--입력한 날까지 더하기
		result = dayName[days%7];	//--다 더한 값(days)을 7로 나눈 나머지가 요일을 담은 배열 안에서의 위치가 됨
		
		return result;
	}

	
	// 메소드 정의(결과 출력하기)
	void print(String result)
	{
		System.out.printf(">> %s년 %s월 %s일 → %s\n", y, m, d, result);
	}
}


public class Test092
{
	public static void main(String[] args)
	{
		WeekDay wd = new WeekDay();
		wd.input();					//--입력 메소드 호출
		String result = wd.week();	//--요일 산출 메소드 호출
		wd.print(result);			//--결과 출력 메소드 호출
	}
}

/*
[강사님 풀이]
String week()
{
	// 각 월의 마지막 날짜(각 월의 최대값)을 배열 형태로 구성
	int[] months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};							//--월별 일수를 담은 배열
	// 요일명에 대한 배열 구성
	String[] weekNames = {"일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"};	//--요일을 담은 배열
		
	// 날수를 종합할 변수, 루프변수, 요일변수
	int nalsu, i, w;

	// 윤년에 따른 2월의 날수 계산
	// 윤년이라면 2월의 마지막 날짜 29일로 설정	→ months[1] = 29;
	// 평년이라면 2월의 마지막 날짜 28일로 설정 → months[1] = 28;
	if (y%4==0 && y%100!=0 || y%400==0)	//--입력한 연도가 윤년이라면
		months[1] = 29;		//--2월의 마지막 날짜를 29일로 설정
	else	//--입력한 연도가 평년이라면
		months[1] = 28;		//--2월의 마지막 날짜를 28일로 설정

	// ① 1년 1월 1일부터 입력받은 연도의 이전 연도 12월 31일까지의 날 수 계산
	nalsu = (y-1) *365 + (y-1)/4 - (y-1)/100 + (y-1)/400;

	// ② 입력받은 월의 이전 월까지의 날수 계산 후 1번 결과에 더하는 연산
	for (i=0; i<m-1; i++)
		nalsu += months[i];
	
	// ③ 입력받은 일의 날짜만큼 날수 계산 후 2번 결과에 더하는 연산
	nalsu += d;		//--날수를 d만큼 증가시킴

	//------------------------------------------여기까지 날수 연산 끝

	// 무슨 요일인지 확인하기 위한 연산
	w = nalsu % 7;
	// 전체 날수 % 7 == 0 → 일요일
	//                  1 → 월요일
	//                  | →    |

	return weekNames[w];
}

*/

/*
[실행 결과]
년 월 일 입력(공백 구분): 1998 7 9
>> 1998년 7월 9일 → 목요일
계속하려면 아무 키나 누르십시오 . . .
*/
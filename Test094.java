/*=============================
+++++++클래스와 인스턴스+++++++
-클래스와 인스턴스 활용
===============================
◎ Test094.java
=============================*/


// ○ 실습 문제
//    학생별로 국어점수, 영어점수, 수학점수를 입력받아
//    총점, 평균을 산출하는 프로그램을 구현한다.
//    단, 클래스의 개념을 활용하여 작성할 수 있도록 한다.
//    또한, 이 과정에서 배열을 적극적으로 활용할 수 있도록 한다.
//    마지막으로, 다음의 요구사항을 충족할 수 있도록 설계한다.

// 프로그램을 구성하는 클래스
// 1. Record 클래스
//    - 속성만 존재하는 클래스로 설계할 것 (메소드 없이 변수들로만 구성되어 있는 클래스)
// 2. Sungjuk 클래스
//    - 인원 수를 입력받아 입력받은 인원 수만큼
//      이름, 국어점수, 영어점수, 수학점수를 입력받고
//      총점과 평균을 산출하는 클래스로 설계할 것
//    - 속성: 인원 수, ★Record 형태의 배열★(Record[] recArr)
//    - 기능: 인원 수 입력, 상세 데이터(성적) 입력, 총점/평균 산출, 결과 출력
// 3. Test094 클래스
//    - main() 메소드가 존재하는 외부의 다른 클래스로 설계

// 실행 예시
// 인원 수 입력(1~100): 105
// 인원 수 입력(1~100): -7
// 인원 수 입력(1~100): 3
// 1번째 학생의 이름 입력: a
// 국어 점수: 90
// 영어 점수: 80
// 수학 점수: 70
// 2번째 학생의 이름 입력: b
// 국어 점수: 82
// 영어 점수: 72
// 수학 점수: 62
// 3번째 학생의 이름 입력: c
// 국어 점수: 98
// 영어 점수: 88
// 수학 점수: 78

// a 90 80 70 240 xx.xx	2
// b 82 72 62 xxx xx.xx	3
// c 98 88 78 xxx xx.xx	1

// 계속하려면 아무 키나 누르십시오 . . .


public class Test094
{
	public static void main(String[] args)
	{
		Sungjuk sj = new Sungjuk();
		sj.studentNum();
		sj.grade();
		sj.cal();
		sj.calRank();
		sj.print();
	}
}

/*
[강사님 풀이]
Sungjuk ob = new Sungjuk();
ob.set();
ob.input();
ob.print();
*/


/*
[실행 결과]
인원 수 입력(1~100): 3
1번째 학생의 이름 입력: a
국어 점수: 90
영어 점수: 80
수학 점수: 70
2번째 학생의 이름 입력: b
국어 점수: 82
영어 점수: 72
수학 점수: 62
3번째 학생의 이름 입력: c
국어 점수: 98
영어 점수: 88
수학 점수: 78
a 90 80 70 240 80.00　　2
b 82 72 62 216 72.00　　3
c 98 88 78 264 88.00　　1
계속하려면 아무 키나 누르십시오 . . .
*/